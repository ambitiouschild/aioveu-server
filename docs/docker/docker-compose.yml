# 创建一个名为 "aioveu-server" 的桥接网络，在同一个网络中的容器可以通过容器名互相访问
networks:
  aioveu-server:
    driver: bridge

# 镜像image7个 1.mysql 2.nacos 3.seata 4.redis 5.minio 6.rabbitmq 7.xxl-job-admin
services:   #/usr/sbin/mysqld: ready for connections. Version: '8.0.29'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MySQL Community Server - GPL.
  mysql:    #等一等不要着急，创建密码和数据持久化需要时间，直到创数据库完成
    image: mysql:8.0.29
    container_name: aioveu-mysql  # 容器名称，在同一个Docker网络中，其他容器可以通过这个名称访问
    restart: unless-stopped # 重启策略：除非手动停止容器，否则自动重启
    environment:
      - TZ=Asia/Shanghai
      - LANG= en_US.UTF-8
      - MYSQL_ROOT_PASSWORD=775825 #设置 root 用户的密码
    volumes:
      - ./mysql/conf/my.cnf:/etc/my.cnf # 挂载 my.cnf 文件到容器的指定路径
      - ./mysql/data:/var/lib/mysql # 持久化 MySQL 数据
      - ../sql/mysql8:/docker-entrypoint-initdb.d # 初始化 SQL 脚本目录
    ports:
      - 3308:3306 # 暴露 3306 端口
    networks:
      - aioveu-server # 加入 "aioveu-server" 网络
    healthcheck: # 可以添加健康检查
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p775825" ]
      interval: 5s
      timeout: 10s
      retries: 10

  nacos:  #docker exec -it aioveu-server-nacos-server ping mysql
    image: nacos/nacos-server:v2.2.3 # 使用 Nacos 2.2.3 镜像
    container_name: aioveu-nacos-server
    restart: unless-stopped # 重启策略：除非手动停止容器，否则自动重启
    environment:
      # 数据库连接配置  使用内置数据库配置方式
      - MODE=standalone
       # 添加关键环境变量
      - DB_NUM=1  # 解决 db.num is null # 错误：值被引号包裹，会导致值变成字符串 ""1""
      - JVM_XMS=2g  #-Xms 2g 中空格导致 JVM 无法识别
      - JVM_XMX=2g #JVM 内存参数格式应为 -Xms2g（无空格）

    volumes: # 挂载关键配置文件
      - ./nacos/datadir:/home/nacos/data
      - ./nacos/conf:/home/nacos/conf
      - ./nacos/logs:/home/nacos/logs
      - ./nacos/wait-for-mysql.sh:/wait-for-mysql.sh  # 挂载等待脚本
    ports:
      - 8849:8848
      - 9849:9848  # 必须暴露9848端口
    networks:
      - aioveu-server # 加入 "aioveu-server" 网络
    depends_on:
      - mysql # 保证 MySQL 服务先启动
    command: sh -c "sh /wait-for-mysql.sh && bash /home/nacos/bin/startup.sh -m standalone"


  seata:
    image: seataio/seata-server:1.7.1
    container_name: aioveu-seata-server
    restart: unless-stopped #  指定了容器的重启策略，除了手动停止容器，其他情况都自动重启容器
    environment:
      # Nacos 注册中心配置
      SEATA_REGISTRY_TYPE: nacos   # 注意这里改为SEATA_REGISTRY_TYPE（注册类型）
      SEATA_REGISTRY_NACOS_APPLICATION: aioveu-seata-server
      SEATA_REGISTRY_NACOS_SERVER_ADDR: nacos:8848
      SEATA_REGISTRY_NACOS_GROUP: SEATA_GROUP
      SEATA_REGISTRY_NACOS_CLUSTER: default
      SEATA_REGISTRY_NACOS_USERNAME: admin
      SEATA_REGISTRY_NACOS_PASSWORD: 775825

      # Nacos 配置中心配置
      SEATA_CONFIG_TYPE: nacos     # 配置中心类型
      SEATA_CONFIG_NACOS_SERVER_ADDR: nacos:8848
      SEATA_CONFIG_NACOS_GROUP: SEATA_GROUP
      SEATA_CONFIG_NACOS_DATA_ID: seataServer.properties
      SEATA_CONFIG_NACOS_USERNAME: admin
      SEATA_CONFIG_NACOS_PASSWORD: 775825

      # 数据库驱动类路径设置
      JAVA_OPTS: >-
        -Dloader.path=/seata-server/lib
        -Dlog.home=/root/logs/seata
        -Xmx512m -Xms256m

      # 等待依赖服务
      WAIT_FOR_SERVICES: "mysql:3306 nacos:8848"
      WAIT_TIMEOUT: 180

    volumes:
      # 挂载registry.conf，这样Seata会使用这个配置连接Nacos
      - ./seata/config/registry.conf:/seata-server/resources/registry.conf
#      - ./seata/config:/seata-server/resources  # 挂载自定义配置文件  # 挂载配置文件，其中包含registry.conf和file.conf
      # 挂载MySQL驱动
      - ./lib/mysql-connector-j-8.0.33.jar:/seata-server/lib/mysql-connector-java.jar
      # 挂载日志目录
      - ./seata/logs:/root/logs/seata
    ports:
      - 8092:8091   # Seata服务端口  # 将宿主机的8092映射到容器的8091
      - 7092:7091  # Seata控制台端口（1.7.1版本开始有控制台）
    networks:
      - aioveu-server
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_started


  redis:
    image: redis:7.2.3
    container_name: aioveu-redis
    restart: unless-stopped # 重启策略：除非手动停止容器，否则自动重启
    command: redis-server /etc/redis/redis.conf  --pidfile /data/redis.pid # 启动 Redis 服务并添加密码为--requirepass 775825，默认不开启 Redis AOF 方式持久化配置
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./redis/data:/data
      - ./redis/config/redis.conf:/etc/redis/redis.conf
    ports:
      - 6380:6379
    networks:
      - aioveu-server
        #NOAUTH Authentication required 应用程序未使用密码
      #WRONGPASS invalid username-password pair  密码不匹配
      #Connection refused: no further information 连接地址错误

  minio:
    image: minio/minio:latest
    container_name: aioveu-minio
    restart: unless-stopped # 重启策略：除非手动停止容器，否则自动重启
    command: server /data --console-address ":9090"
    ports:
      - 9001:9000
      - 9091:9090
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
      - MINIO_ROOT_USER=minioadminlss
      - MINIO_ROOT_PASSWORD=minioadminlss
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    networks:
      - aioveu-server

  rabbitmq:
    image: rabbitmq:management
    container_name: aioveu-rabbitmq
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
      - RABBITMQ_DEFAULT_USER=adminlss
      - RABBITMQ_DEFAULT_PASS=adminlss
    ports:
      - 5673:5672
      - 15673:15672
    networks:
      - aioveu-server # 加入 "mall" 网络

  xxl-job-admin:
    image: xuxueli/xxl-job-admin:2.4.0   # https://hub.docker.com/r/xuxueli/xxl-job-admin/tags
    container_name: aioveu-xxl-job-admin
    restart: unless-stopped #  指定了容器的重启策略，除了手动停止容器，其他情况都自动重启容器
    environment:
      PARAMS: '--spring.datasource.url=jdbc:mysql://mysql:3306/aioveu_xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=123456 --spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver'
    volumes:
      - ./xxljob/logs:/data/applogs
    ports:
      - 8181:8080
    networks:
      - aioveu-server
#
  gateway:
    image: aioveu-gateway:latest
    container_name: aioveu-gateway
#    build:
#      context: .
#      dockerfile: Dockerfile
    ports:
      - "9999:9999"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
#
  auth:
    image: aioveu-auth:v0.0.3
    container_name: aioveu-auth
    #    build:
    #      context: .
    #      dockerfile: Dockerfile
    ports:
      - "9003:9003"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway

  system:
    image: aioveu-system:v0.0.3
    container_name: aioveu-system
    #    build:
    #      context: .
    #      dockerfile: Dockerfile
    ports:
      - "8801:8800"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway
      - auth

  oms:
    image: aioveu-oms:v0.0.3
    container_name: aioveu-oms
    ports:
      - "8813:8803"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway
      - auth

  pms:
    image: aioveu-pms:v0.0.3
    container_name: aioveu-pms
    ports:
      - "8812:8802"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway
      - auth
  sms:
    image: aioveu-sms:v0.0.3
    container_name: aioveu-sms
    ports:
      - "8814:8804"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway
      - auth
  ums:
    image: aioveu-ums:v0.0.3
    container_name: aioveu-ums
    ports:
      - "8811:8801"
    networks:
      - aioveu-server
    depends_on:
      - mysql
      - nacos
      - gateway
      - auth